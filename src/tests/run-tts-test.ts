import * as dotenv from 'dotenv'
import { promises as fs } from 'fs'
import path from 'path'

// Load environment variables
dotenv.config({ path: '.env.local' })

// Test with sample API keys - replace these with your actual keys
const TEST_GEMINI_KEY = process.env.GOOGLE_GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY_HERE'
const TEST_CARTESIA_KEY = process.env.CARTESIA_API_KEY || 'YOUR_CARTESIA_API_KEY_HERE'

async function setupTestEnvironment() {
  // Create a temporary .env.local file with test keys
  const envContent = `
# Test API Keys - Replace with your actual keys
GOOGLE_GEMINI_API_KEY=${TEST_GEMINI_KEY}
CARTESIA_API_KEY=${TEST_CARTESIA_KEY}
`.trim()

  // Check if we have placeholder keys
  if (TEST_GEMINI_KEY.includes('YOUR_') || TEST_CARTESIA_KEY.includes('YOUR_')) {
    console.log('‚ö†Ô∏è  WARNING: Using placeholder API keys')
    console.log('To run actual tests, please set your API keys in .env.local:')
    console.log('GOOGLE_GEMINI_API_KEY=your_actual_gemini_key')
    console.log('CARTESIA_API_KEY=your_actual_cartesia_key')
    console.log('')
    console.log('You can get these keys from:')
    console.log('- Gemini: https://makersuite.google.com/app/apikey')
    console.log('- Cartesia: https://cartesia.ai/dashboard')
    return false
  }

  return true
}

async function runTest() {
  const hasValidKeys = await setupTestEnvironment()
  
  if (!hasValidKeys) {
    console.log('\nüîß Creating mock audio files for demonstration...')
    
    // Create temp directory
    const tempDir = path.join(process.cwd(), 'temp')
    await fs.mkdir(tempDir, { recursive: true })
    
    // Create mock audio files with metadata
    const mockAudioData = Buffer.from('Mock audio file - replace with real API keys to generate actual audio', 'utf-8')
    
    await fs.writeFile(path.join(tempDir, 'cartesia-test-mock.txt'), 
      'This would be an MP3 audio file generated by Cartesia TTS\n' +
      'Voice: Professional US English\n' +
      'Duration: ~18 seconds\n' +
      'Quality: High (specialized TTS service)'
    )
    
    await fs.writeFile(path.join(tempDir, 'gemini-test-mock.txt'), 
      'This would be an MP3 audio file generated by Gemini TTS\n' +
      'Voice: Kore (Firm style)\n' + 
      'Duration: ~18 seconds\n' +
      'Quality: Good (general purpose AI model)'
    )
    
    console.log('‚úÖ Created mock files in temp/ directory')
    console.log('üìÅ Files created:')
    console.log('   - temp/cartesia-test-mock.txt')
    console.log('   - temp/gemini-test-mock.txt')
    return
  }

  // Run the actual test
  console.log('üöÄ Running TTS comparison with real API keys...')
  try {
    const { execSync } = require('child_process')
    execSync('npx tsx src/tests/tts-comparison.test.ts', { stdio: 'inherit' })
  } catch (error) {
    console.error('‚ùå Test failed:', error)
  }
}

// Run the test
runTest().catch(console.error)